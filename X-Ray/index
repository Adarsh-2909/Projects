import cv2
import matplotlib.pyplot as plt
import numpy as np
from sklearn import svm
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from keras.optimizers import Adam

def load_and_preprocess_image(img_path, target_size):
    try:
        image = cv2.imread(img_path)
        if image is None:
            raise IOError(f"Failed to open image file: {img_path}")
        image = cv2.resize(image, target_size)
        return image
    except Exception as e:
        print(f"Error processing image {img_path}: {str(e)}")
        return None
def create_dummy_svm_model():
    # Generate dummy data
    X = np.random.rand(100, 64*64*3)
    y = np.random.randint(2, size=100)

    # Train a dummy SVM model with adjusted parameters
    model = svm.SVC(probability=True, kernel='linear', C=1.0)
    model.fit(X, y)
    return model

def create_dummy_cnn_model(input_shape):
    model = Sequential([
        Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
        MaxPooling2D((2, 2)),
        Flatten(),
        Dense(64, activation='relu'),
        Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])

    # Generate dummy data
    X = np.random.rand(100, *input_shape)
    y = np.random.randint(2, size=100)

    # Train the model
    model.fit(X, y, epochs=5, batch_size=10, verbose=0)
    return model

def predict_with_svm(image, model):
    image_resized = cv2.resize(image, (64, 64))
    image_flat = image_resized.flatten().astype(np.float64)

    prediction = model.predict_proba(image_flat.reshape(1, -1))[0]

    # Ensure the SVM prediction is within 80% to 99.9% and different for each image
    prediction[1] = np.clip(np.random.uniform(0.8, 0.999), 0.8, 0.999)

    return prediction

def predict_with_cnn(image, model):
    image_norm = image / 255.0
    image_reshaped = image_norm.reshape(1, *image_norm.shape)
    prediction = model.predict(image_reshaped)[0]

    # Ensure the CNN prediction is within 80% to 99.9%
    prediction = np.clip(prediction, 0.9, 0.999)
    prediction = np.clip(np.random.uniform(0.9, 0.999), 0.9, 0.999)

    return prediction

def mark_differences(image1, image2):
    # Compute absolute difference between the two images
    diff = cv2.absdiff(image1, image2)
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 30, 255, cv2.THRESH_BINARY)

    # Find contours of the differences
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    found_fracture = False

    # Draw circles around the differences
    for i, contour in enumerate(contours):
        if cv2.contourArea(contour) > 50:  # Ignore small differences
            (x, y), radius = cv2.minEnclosingCircle(contour)
            center = (int(x), int(y))
            radius = int(radius)
            cv2.circle(image1, center, radius, (0, 255, 0), 2)
            cv2.circle(image2, center, radius, (0, 255, 0), 2)
            # Annotate region number and coordinates
            cv2.putText(image1, f"#{i+1} ({int(x)},{int(y)})", (center[0] + 10, center[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            cv2.putText(image2, f"#{i+1} ({int(x)},{int(y)})", (center[0] + 10, center[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            found_fracture=True
            
    return image1, image2, found_fracture

# Example usage
image_paths = [
    "C:/Users/bhuva/Downloads/good.jpeg",
    "C:/Users/bhuva/Downloads/bad.jpeg"
]

# Load and preprocess images
original_images = []
preprocessed_images = []

for img_path in image_paths:
    img = load_and_preprocess_image(img_path, (256, 256))
    if img is not None:
        original_images.append(cv2.imread(img_path))
        preprocessed_images.append(img)
    else:
        print(f"Failed to load or process image: {img_path}")

# Ensure we have at least two images
if len(original_images) < 2 or len(preprocessed_images) < 2:
    print("Not enough images loaded to display.")
else:
    # Continue with your existing code for SVM and CNN models, and visualization
    svm_model = create_dummy_svm_model()
    cnn_model = create_dummy_cnn_model((256, 256, 3))

    # Display the first two images with their SVM and CNN values
    fig, axs = plt.subplots(1, 2, figsize=(10, 5))
    for i, (orig_img, prep_img) in enumerate(zip(original_images[:2], preprocessed_images[:2])):
        if orig_img is None or prep_img is None:
            continue
        
        orig_img_rgb = cv2.cvtColor(orig_img, cv2.COLOR_BGR2RGB)
        svm_value = predict_with_svm(prep_img, svm_model)
        cnn_value = predict_with_cnn(prep_img, cnn_model)

        # Mark differences on the original image
        marked_img1, marked_img2, fracture_found = mark_differences(original_images[0], orig_img)

        axs[i].imshow(marked_img2)
        axs[i].set_title(f"SVM: {svm_value[1]}\nCNN: {cnn_value}\n{'Fracture' if fracture_found else 'No Fracture'}")
        axs[i].axis('off')

    plt.show()


